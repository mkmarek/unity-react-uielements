



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UIElements;
using ChakraHost.Hosting;
using UnityReactUIElements.Bridge;

namespace UnityReactUIElements.Bridge
{
    internal static partial class ComponentMapper
    {
        public static VisualElement CreateComponent(string componentType)
        {
            if (componentType == "bindableElement") return new ReactBindableElement();
            if (componentType == "box") return new ReactBox();
            if (componentType == "button") return new ReactButton();
            if (componentType == "foldout") return new ReactFoldout();
            if (componentType == "image") return new ReactImage();
            if (componentType == "iMGUIContainer") return new ReactIMGUIContainer();
            if (componentType == "label") return new ReactLabel();
            if (componentType == "listView") return new ReactListView();
            if (componentType == "minMaxSlider") return new ReactMinMaxSlider();
            if (componentType == "popupWindow") return new ReactPopupWindow();
            if (componentType == "repeatButton") return new ReactRepeatButton();
            if (componentType == "scroller") return new ReactScroller();
            if (componentType == "scrollView") return new ReactScrollView();
            if (componentType == "slider") return new ReactSlider();
            if (componentType == "sliderInt") return new ReactSliderInt();
            if (componentType == "templateContainer") return new ReactTemplateContainer();
            if (componentType == "textElement") return new ReactTextElement();
            if (componentType == "visualElement") return new ReactVisualElement();
            if (componentType == "textField") return new ReactTextField();
            if (componentType == "toggle") return new ReactToggle();
            throw new InvalidOperationException($"Unknown native component type {componentType}");
        }


        public static IComponentProps MakePropsDiff(string componentType, IComponentProps oldProps, IComponentProps newProps)
        {
            if (componentType == "bindableElement") return MakeBindableElementPropsDiff((BindableElementProps)oldProps, (BindableElementProps)newProps);
            if (componentType == "box") return MakeBoxPropsDiff((BoxProps)oldProps, (BoxProps)newProps);
            if (componentType == "button") return MakeButtonPropsDiff((ButtonProps)oldProps, (ButtonProps)newProps);
            if (componentType == "foldout") return MakeFoldoutPropsDiff((FoldoutProps)oldProps, (FoldoutProps)newProps);
            if (componentType == "image") return MakeImagePropsDiff((ImageProps)oldProps, (ImageProps)newProps);
            if (componentType == "iMGUIContainer") return MakeIMGUIContainerPropsDiff((IMGUIContainerProps)oldProps, (IMGUIContainerProps)newProps);
            if (componentType == "label") return MakeLabelPropsDiff((LabelProps)oldProps, (LabelProps)newProps);
            if (componentType == "listView") return MakeListViewPropsDiff((ListViewProps)oldProps, (ListViewProps)newProps);
            if (componentType == "minMaxSlider") return MakeMinMaxSliderPropsDiff((MinMaxSliderProps)oldProps, (MinMaxSliderProps)newProps);
            if (componentType == "popupWindow") return MakePopupWindowPropsDiff((PopupWindowProps)oldProps, (PopupWindowProps)newProps);
            if (componentType == "repeatButton") return MakeRepeatButtonPropsDiff((RepeatButtonProps)oldProps, (RepeatButtonProps)newProps);
            if (componentType == "scroller") return MakeScrollerPropsDiff((ScrollerProps)oldProps, (ScrollerProps)newProps);
            if (componentType == "scrollView") return MakeScrollViewPropsDiff((ScrollViewProps)oldProps, (ScrollViewProps)newProps);
            if (componentType == "slider") return MakeSliderPropsDiff((SliderProps)oldProps, (SliderProps)newProps);
            if (componentType == "sliderInt") return MakeSliderIntPropsDiff((SliderIntProps)oldProps, (SliderIntProps)newProps);
            if (componentType == "templateContainer") return MakeTemplateContainerPropsDiff((TemplateContainerProps)oldProps, (TemplateContainerProps)newProps);
            if (componentType == "textElement") return MakeTextElementPropsDiff((TextElementProps)oldProps, (TextElementProps)newProps);
            if (componentType == "visualElement") return MakeVisualElementPropsDiff((VisualElementProps)oldProps, (VisualElementProps)newProps);
            if (componentType == "textField") return MakeTextFieldPropsDiff((TextFieldProps)oldProps, (TextFieldProps)newProps);
            if (componentType == "toggle") return MakeTogglePropsDiff((ToggleProps)oldProps, (ToggleProps)newProps);
            throw new InvalidOperationException($"Unknown native component type {componentType}");
        }
        public static IComponentProps CreateProps(string componentType, JavaScriptValue props)
        {
            if (componentType == "bindableElement") return CreateBindableElementProps(props);
            if (componentType == "box") return CreateBoxProps(props);
            if (componentType == "button") return CreateButtonProps(props);
            if (componentType == "foldout") return CreateFoldoutProps(props);
            if (componentType == "image") return CreateImageProps(props);
            if (componentType == "iMGUIContainer") return CreateIMGUIContainerProps(props);
            if (componentType == "label") return CreateLabelProps(props);
            if (componentType == "listView") return CreateListViewProps(props);
            if (componentType == "minMaxSlider") return CreateMinMaxSliderProps(props);
            if (componentType == "popupWindow") return CreatePopupWindowProps(props);
            if (componentType == "repeatButton") return CreateRepeatButtonProps(props);
            if (componentType == "scroller") return CreateScrollerProps(props);
            if (componentType == "scrollView") return CreateScrollViewProps(props);
            if (componentType == "slider") return CreateSliderProps(props);
            if (componentType == "sliderInt") return CreateSliderIntProps(props);
            if (componentType == "templateContainer") return CreateTemplateContainerProps(props);
            if (componentType == "textElement") return CreateTextElementProps(props);
            if (componentType == "visualElement") return CreateVisualElementProps(props);
            if (componentType == "textField") return CreateTextFieldProps(props);
            if (componentType == "toggle") return CreateToggleProps(props);
            throw new InvalidOperationException($"Unknown native component type {componentType}");
        }
        public static void ApplyProps(string componentType, VisualElement element, IComponentProps props)
        {

            if (false) {}
            else if (componentType == "bindableElement") ApplyBindableElementProps((ReactBindableElement)element, (BindableElementProps)props);
            else if (componentType == "box") ApplyBoxProps((ReactBox)element, (BoxProps)props);
            else if (componentType == "button") ApplyButtonProps((ReactButton)element, (ButtonProps)props);
            else if (componentType == "foldout") ApplyFoldoutProps((ReactFoldout)element, (FoldoutProps)props);
            else if (componentType == "image") ApplyImageProps((ReactImage)element, (ImageProps)props);
            else if (componentType == "iMGUIContainer") ApplyIMGUIContainerProps((ReactIMGUIContainer)element, (IMGUIContainerProps)props);
            else if (componentType == "label") ApplyLabelProps((ReactLabel)element, (LabelProps)props);
            else if (componentType == "listView") ApplyListViewProps((ReactListView)element, (ListViewProps)props);
            else if (componentType == "minMaxSlider") ApplyMinMaxSliderProps((ReactMinMaxSlider)element, (MinMaxSliderProps)props);
            else if (componentType == "popupWindow") ApplyPopupWindowProps((ReactPopupWindow)element, (PopupWindowProps)props);
            else if (componentType == "repeatButton") ApplyRepeatButtonProps((ReactRepeatButton)element, (RepeatButtonProps)props);
            else if (componentType == "scroller") ApplyScrollerProps((ReactScroller)element, (ScrollerProps)props);
            else if (componentType == "scrollView") ApplyScrollViewProps((ReactScrollView)element, (ScrollViewProps)props);
            else if (componentType == "slider") ApplySliderProps((ReactSlider)element, (SliderProps)props);
            else if (componentType == "sliderInt") ApplySliderIntProps((ReactSliderInt)element, (SliderIntProps)props);
            else if (componentType == "templateContainer") ApplyTemplateContainerProps((ReactTemplateContainer)element, (TemplateContainerProps)props);
            else if (componentType == "textElement") ApplyTextElementProps((ReactTextElement)element, (TextElementProps)props);
            else if (componentType == "visualElement") ApplyVisualElementProps((ReactVisualElement)element, (VisualElementProps)props);
            else if (componentType == "textField") ApplyTextFieldProps((ReactTextField)element, (TextFieldProps)props);
            else if (componentType == "toggle") ApplyToggleProps((ReactToggle)element, (ToggleProps)props);
            else throw new InvalidOperationException($"Unknown native component type {componentType}");
        }
        ///<Component>
        ///Name:bindableElement
        internal class ReactBindableElement : UnityEngine.UIElements.BindableElement
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct BindableElementProps : IComponentProps
        {
            public StyleProps style;
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateBindableElementProps(JavaScriptValue props)
        {
            var result = new BindableElementProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyBindableElementProps(ReactBindableElement component, BindableElementProps props)
        {
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static BindableElementProps MakeBindableElementPropsDiff(BindableElementProps oldProps, BindableElementProps newProps)
        {
            var result = new BindableElementProps();
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:box
        internal class ReactBox : UnityEngine.UIElements.Box
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct BoxProps : IComponentProps
        {
            public StyleProps style;
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateBoxProps(JavaScriptValue props)
        {
            var result = new BoxProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyBoxProps(ReactBox component, BoxProps props)
        {
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static BoxProps MakeBoxPropsDiff(BoxProps oldProps, BoxProps newProps)
        {
            var result = new BoxProps();
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:button
        internal class ReactButton : UnityEngine.UIElements.Button
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct ButtonProps : IComponentProps
        {
            public StyleProps style;
            public UnityEngine.UIElements.Clickable clickable; 
            public System.String text; 
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateButtonProps(JavaScriptValue props)
        {
            var result = new ButtonProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("clickable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("text")))
            {
                result.text = props.GetProperty(JavaScriptPropertyId.FromString("text")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyButtonProps(ReactButton component, ButtonProps props)
        {
            if (props.clickable != null)
            {
                component.clickable = props.clickable;
            }
            if (props.text != null)
            {
                component.text = props.text;
            }
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static ButtonProps MakeButtonPropsDiff(ButtonProps oldProps, ButtonProps newProps)
        {
            var result = new ButtonProps();
            if (oldProps.clickable != newProps.clickable)
            {
                result.clickable = newProps.clickable;
            }
            if (oldProps.text != newProps.text)
            {
                result.text = newProps.text;
            }
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:foldout
        internal class ReactFoldout : UnityEngine.UIElements.Foldout
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct FoldoutProps : IComponentProps
        {
            public StyleProps style;
            public System.String text; 
            public Nullable<System.Boolean> value; 
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateFoldoutProps(JavaScriptValue props)
        {
            var result = new FoldoutProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("text")))
            {
                result.text = props.GetProperty(JavaScriptPropertyId.FromString("text")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("value")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyFoldoutProps(ReactFoldout component, FoldoutProps props)
        {
            if (props.text != null)
            {
                component.text = props.text;
            }
            if (props.value.HasValue)
            {
                component.value = props.value.Value;
            }
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static FoldoutProps MakeFoldoutPropsDiff(FoldoutProps oldProps, FoldoutProps newProps)
        {
            var result = new FoldoutProps();
            if (oldProps.text != newProps.text)
            {
                result.text = newProps.text;
            }
            if (oldProps.value != newProps.value)
            {
                result.value = newProps.value;
            }
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:image
        internal class ReactImage : UnityEngine.UIElements.Image
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct ImageProps : IComponentProps
        {
            public StyleProps style;
            public UnityEngine.Texture image; 
            public UnityEngine.UIElements.VectorImage vectorImage; 
            public Nullable<UnityEngine.Rect> sourceRect; 
            public Nullable<UnityEngine.Rect> uv; 
            public Nullable<UnityEngine.ScaleMode> scaleMode; 
            public Nullable<UnityEngine.Color> tintColor; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateImageProps(JavaScriptValue props)
        {
            var result = new ImageProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("image")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("vectorImage")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("sourceRect")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("uv")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("scaleMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tintColor")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyImageProps(ReactImage component, ImageProps props)
        {
            if (props.image != null)
            {
                component.image = props.image;
            }
            if (props.vectorImage != null)
            {
                component.vectorImage = props.vectorImage;
            }
            if (props.sourceRect.HasValue)
            {
                component.sourceRect = props.sourceRect.Value;
            }
            if (props.uv.HasValue)
            {
                component.uv = props.uv.Value;
            }
            if (props.scaleMode.HasValue)
            {
                component.scaleMode = props.scaleMode.Value;
            }
            if (props.tintColor.HasValue)
            {
                component.tintColor = props.tintColor.Value;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static ImageProps MakeImagePropsDiff(ImageProps oldProps, ImageProps newProps)
        {
            var result = new ImageProps();
            if (oldProps.image != newProps.image)
            {
                result.image = newProps.image;
            }
            if (oldProps.vectorImage != newProps.vectorImage)
            {
                result.vectorImage = newProps.vectorImage;
            }
            if (oldProps.sourceRect != newProps.sourceRect)
            {
                result.sourceRect = newProps.sourceRect;
            }
            if (oldProps.uv != newProps.uv)
            {
                result.uv = newProps.uv;
            }
            if (oldProps.scaleMode != newProps.scaleMode)
            {
                result.scaleMode = newProps.scaleMode;
            }
            if (oldProps.tintColor != newProps.tintColor)
            {
                result.tintColor = newProps.tintColor;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:iMGUIContainer
        internal class ReactIMGUIContainer : UnityEngine.UIElements.IMGUIContainer
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct IMGUIContainerProps : IComponentProps
        {
            public StyleProps style;
            public System.Action onGUIHandler; 
            public Nullable<UnityEngine.UIElements.ContextType> contextType; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateIMGUIContainerProps(JavaScriptValue props)
        {
            var result = new IMGUIContainerProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGUIHandler")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("contextType")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyIMGUIContainerProps(ReactIMGUIContainer component, IMGUIContainerProps props)
        {
            if (props.onGUIHandler != null)
            {
                component.onGUIHandler = props.onGUIHandler;
            }
            if (props.contextType.HasValue)
            {
                component.contextType = props.contextType.Value;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static IMGUIContainerProps MakeIMGUIContainerPropsDiff(IMGUIContainerProps oldProps, IMGUIContainerProps newProps)
        {
            var result = new IMGUIContainerProps();
            if (oldProps.onGUIHandler != newProps.onGUIHandler)
            {
                result.onGUIHandler = newProps.onGUIHandler;
            }
            if (oldProps.contextType != newProps.contextType)
            {
                result.contextType = newProps.contextType;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:label
        internal class ReactLabel : UnityEngine.UIElements.Label
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct LabelProps : IComponentProps
        {
            public StyleProps style;
            public System.String text; 
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateLabelProps(JavaScriptValue props)
        {
            var result = new LabelProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("text")))
            {
                result.text = props.GetProperty(JavaScriptPropertyId.FromString("text")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyLabelProps(ReactLabel component, LabelProps props)
        {
            if (props.text != null)
            {
                component.text = props.text;
            }
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static LabelProps MakeLabelPropsDiff(LabelProps oldProps, LabelProps newProps)
        {
            var result = new LabelProps();
            if (oldProps.text != newProps.text)
            {
                result.text = newProps.text;
            }
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:listView
        internal class ReactListView : UnityEngine.UIElements.ListView
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct ListViewProps : IComponentProps
        {
            public StyleProps style;
            public System.Collections.IList itemsSource; 
            public Nullable<System.Int32> itemHeight; 
            public Nullable<System.Int32> selectedIndex; 
            public Nullable<UnityEngine.UIElements.SelectionType> selectionType; 
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateListViewProps(JavaScriptValue props)
        {
            var result = new ListViewProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("itemsSource")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("itemHeight")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("selectedIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("selectionType")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyListViewProps(ReactListView component, ListViewProps props)
        {
            if (props.itemsSource != null)
            {
                component.itemsSource = props.itemsSource;
            }
            if (props.itemHeight.HasValue)
            {
                component.itemHeight = props.itemHeight.Value;
            }
            if (props.selectedIndex.HasValue)
            {
                component.selectedIndex = props.selectedIndex.Value;
            }
            if (props.selectionType.HasValue)
            {
                component.selectionType = props.selectionType.Value;
            }
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static ListViewProps MakeListViewPropsDiff(ListViewProps oldProps, ListViewProps newProps)
        {
            var result = new ListViewProps();
            if (oldProps.itemsSource != newProps.itemsSource)
            {
                result.itemsSource = newProps.itemsSource;
            }
            if (oldProps.itemHeight != newProps.itemHeight)
            {
                result.itemHeight = newProps.itemHeight;
            }
            if (oldProps.selectedIndex != newProps.selectedIndex)
            {
                result.selectedIndex = newProps.selectedIndex;
            }
            if (oldProps.selectionType != newProps.selectionType)
            {
                result.selectionType = newProps.selectionType;
            }
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:minMaxSlider
        internal class ReactMinMaxSlider : UnityEngine.UIElements.MinMaxSlider
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct MinMaxSliderProps : IComponentProps
        {
            public StyleProps style;
            public Nullable<System.Single> minValue; 
            public Nullable<System.Single> maxValue; 
            public Nullable<UnityEngine.Vector2> value; 
            public Nullable<System.Single> lowLimit; 
            public Nullable<System.Single> highLimit; 
            public System.String label; 
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateMinMaxSliderProps(JavaScriptValue props)
        {
            var result = new MinMaxSliderProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("minValue")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("maxValue")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("value")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("lowLimit")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("highLimit")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("label")))
            {
                result.label = props.GetProperty(JavaScriptPropertyId.FromString("label")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyMinMaxSliderProps(ReactMinMaxSlider component, MinMaxSliderProps props)
        {
            if (props.minValue.HasValue)
            {
                component.minValue = props.minValue.Value;
            }
            if (props.maxValue.HasValue)
            {
                component.maxValue = props.maxValue.Value;
            }
            if (props.value.HasValue)
            {
                component.value = props.value.Value;
            }
            if (props.lowLimit.HasValue)
            {
                component.lowLimit = props.lowLimit.Value;
            }
            if (props.highLimit.HasValue)
            {
                component.highLimit = props.highLimit.Value;
            }
            if (props.label != null)
            {
                component.label = props.label;
            }
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static MinMaxSliderProps MakeMinMaxSliderPropsDiff(MinMaxSliderProps oldProps, MinMaxSliderProps newProps)
        {
            var result = new MinMaxSliderProps();
            if (oldProps.minValue != newProps.minValue)
            {
                result.minValue = newProps.minValue;
            }
            if (oldProps.maxValue != newProps.maxValue)
            {
                result.maxValue = newProps.maxValue;
            }
            if (oldProps.value != newProps.value)
            {
                result.value = newProps.value;
            }
            if (oldProps.lowLimit != newProps.lowLimit)
            {
                result.lowLimit = newProps.lowLimit;
            }
            if (oldProps.highLimit != newProps.highLimit)
            {
                result.highLimit = newProps.highLimit;
            }
            if (oldProps.label != newProps.label)
            {
                result.label = newProps.label;
            }
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:popupWindow
        internal class ReactPopupWindow : UnityEngine.UIElements.PopupWindow
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct PopupWindowProps : IComponentProps
        {
            public StyleProps style;
            public System.String text; 
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreatePopupWindowProps(JavaScriptValue props)
        {
            var result = new PopupWindowProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("text")))
            {
                result.text = props.GetProperty(JavaScriptPropertyId.FromString("text")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyPopupWindowProps(ReactPopupWindow component, PopupWindowProps props)
        {
            if (props.text != null)
            {
                component.text = props.text;
            }
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static PopupWindowProps MakePopupWindowPropsDiff(PopupWindowProps oldProps, PopupWindowProps newProps)
        {
            var result = new PopupWindowProps();
            if (oldProps.text != newProps.text)
            {
                result.text = newProps.text;
            }
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:repeatButton
        internal class ReactRepeatButton : UnityEngine.UIElements.RepeatButton
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct RepeatButtonProps : IComponentProps
        {
            public StyleProps style;
            public System.String text; 
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateRepeatButtonProps(JavaScriptValue props)
        {
            var result = new RepeatButtonProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("text")))
            {
                result.text = props.GetProperty(JavaScriptPropertyId.FromString("text")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyRepeatButtonProps(ReactRepeatButton component, RepeatButtonProps props)
        {
            if (props.text != null)
            {
                component.text = props.text;
            }
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static RepeatButtonProps MakeRepeatButtonPropsDiff(RepeatButtonProps oldProps, RepeatButtonProps newProps)
        {
            var result = new RepeatButtonProps();
            if (oldProps.text != newProps.text)
            {
                result.text = newProps.text;
            }
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:scroller
        internal class ReactScroller : UnityEngine.UIElements.Scroller
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct ScrollerProps : IComponentProps
        {
            public StyleProps style;
            public Nullable<System.Single> value; 
            public Nullable<System.Single> lowValue; 
            public Nullable<System.Single> highValue; 
            public Nullable<UnityEngine.UIElements.SliderDirection> direction; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateScrollerProps(JavaScriptValue props)
        {
            var result = new ScrollerProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("value")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("lowValue")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("highValue")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("direction")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyScrollerProps(ReactScroller component, ScrollerProps props)
        {
            if (props.value.HasValue)
            {
                component.value = props.value.Value;
            }
            if (props.lowValue.HasValue)
            {
                component.lowValue = props.lowValue.Value;
            }
            if (props.highValue.HasValue)
            {
                component.highValue = props.highValue.Value;
            }
            if (props.direction.HasValue)
            {
                component.direction = props.direction.Value;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static ScrollerProps MakeScrollerPropsDiff(ScrollerProps oldProps, ScrollerProps newProps)
        {
            var result = new ScrollerProps();
            if (oldProps.value != newProps.value)
            {
                result.value = newProps.value;
            }
            if (oldProps.lowValue != newProps.lowValue)
            {
                result.lowValue = newProps.lowValue;
            }
            if (oldProps.highValue != newProps.highValue)
            {
                result.highValue = newProps.highValue;
            }
            if (oldProps.direction != newProps.direction)
            {
                result.direction = newProps.direction;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:scrollView
        internal class ReactScrollView : UnityEngine.UIElements.ScrollView
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct ScrollViewProps : IComponentProps
        {
            public StyleProps style;
            public Nullable<System.Boolean> showHorizontal; 
            public Nullable<System.Boolean> showVertical; 
            public Nullable<UnityEngine.Vector2> scrollOffset; 
            public Nullable<System.Single> horizontalPageSize; 
            public Nullable<System.Single> verticalPageSize; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateScrollViewProps(JavaScriptValue props)
        {
            var result = new ScrollViewProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("showHorizontal")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("showVertical")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("scrollOffset")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("horizontalPageSize")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("verticalPageSize")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyScrollViewProps(ReactScrollView component, ScrollViewProps props)
        {
            if (props.showHorizontal.HasValue)
            {
                component.showHorizontal = props.showHorizontal.Value;
            }
            if (props.showVertical.HasValue)
            {
                component.showVertical = props.showVertical.Value;
            }
            if (props.scrollOffset.HasValue)
            {
                component.scrollOffset = props.scrollOffset.Value;
            }
            if (props.horizontalPageSize.HasValue)
            {
                component.horizontalPageSize = props.horizontalPageSize.Value;
            }
            if (props.verticalPageSize.HasValue)
            {
                component.verticalPageSize = props.verticalPageSize.Value;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static ScrollViewProps MakeScrollViewPropsDiff(ScrollViewProps oldProps, ScrollViewProps newProps)
        {
            var result = new ScrollViewProps();
            if (oldProps.showHorizontal != newProps.showHorizontal)
            {
                result.showHorizontal = newProps.showHorizontal;
            }
            if (oldProps.showVertical != newProps.showVertical)
            {
                result.showVertical = newProps.showVertical;
            }
            if (oldProps.scrollOffset != newProps.scrollOffset)
            {
                result.scrollOffset = newProps.scrollOffset;
            }
            if (oldProps.horizontalPageSize != newProps.horizontalPageSize)
            {
                result.horizontalPageSize = newProps.horizontalPageSize;
            }
            if (oldProps.verticalPageSize != newProps.verticalPageSize)
            {
                result.verticalPageSize = newProps.verticalPageSize;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:slider
        internal class ReactSlider : UnityEngine.UIElements.Slider
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct SliderProps : IComponentProps
        {
            public StyleProps style;
            public Nullable<System.Single> lowValue; 
            public Nullable<System.Single> highValue; 
            public Nullable<System.Single> pageSize; 
            public Nullable<System.Single> value; 
            public Nullable<UnityEngine.UIElements.SliderDirection> direction; 
            public System.String label; 
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateSliderProps(JavaScriptValue props)
        {
            var result = new SliderProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("lowValue")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("highValue")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pageSize")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("value")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("direction")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("label")))
            {
                result.label = props.GetProperty(JavaScriptPropertyId.FromString("label")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplySliderProps(ReactSlider component, SliderProps props)
        {
            if (props.lowValue.HasValue)
            {
                component.lowValue = props.lowValue.Value;
            }
            if (props.highValue.HasValue)
            {
                component.highValue = props.highValue.Value;
            }
            if (props.pageSize.HasValue)
            {
                component.pageSize = props.pageSize.Value;
            }
            if (props.value.HasValue)
            {
                component.value = props.value.Value;
            }
            if (props.direction.HasValue)
            {
                component.direction = props.direction.Value;
            }
            if (props.label != null)
            {
                component.label = props.label;
            }
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static SliderProps MakeSliderPropsDiff(SliderProps oldProps, SliderProps newProps)
        {
            var result = new SliderProps();
            if (oldProps.lowValue != newProps.lowValue)
            {
                result.lowValue = newProps.lowValue;
            }
            if (oldProps.highValue != newProps.highValue)
            {
                result.highValue = newProps.highValue;
            }
            if (oldProps.pageSize != newProps.pageSize)
            {
                result.pageSize = newProps.pageSize;
            }
            if (oldProps.value != newProps.value)
            {
                result.value = newProps.value;
            }
            if (oldProps.direction != newProps.direction)
            {
                result.direction = newProps.direction;
            }
            if (oldProps.label != newProps.label)
            {
                result.label = newProps.label;
            }
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:sliderInt
        internal class ReactSliderInt : UnityEngine.UIElements.SliderInt
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct SliderIntProps : IComponentProps
        {
            public StyleProps style;
            public Nullable<System.Single> pageSize; 
            public Nullable<System.Int32> lowValue; 
            public Nullable<System.Int32> highValue; 
            public Nullable<System.Int32> value; 
            public Nullable<UnityEngine.UIElements.SliderDirection> direction; 
            public System.String label; 
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateSliderIntProps(JavaScriptValue props)
        {
            var result = new SliderIntProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("pageSize")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("lowValue")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("highValue")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("value")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("direction")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("label")))
            {
                result.label = props.GetProperty(JavaScriptPropertyId.FromString("label")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplySliderIntProps(ReactSliderInt component, SliderIntProps props)
        {
            if (props.pageSize.HasValue)
            {
                component.pageSize = props.pageSize.Value;
            }
            if (props.lowValue.HasValue)
            {
                component.lowValue = props.lowValue.Value;
            }
            if (props.highValue.HasValue)
            {
                component.highValue = props.highValue.Value;
            }
            if (props.value.HasValue)
            {
                component.value = props.value.Value;
            }
            if (props.direction.HasValue)
            {
                component.direction = props.direction.Value;
            }
            if (props.label != null)
            {
                component.label = props.label;
            }
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static SliderIntProps MakeSliderIntPropsDiff(SliderIntProps oldProps, SliderIntProps newProps)
        {
            var result = new SliderIntProps();
            if (oldProps.pageSize != newProps.pageSize)
            {
                result.pageSize = newProps.pageSize;
            }
            if (oldProps.lowValue != newProps.lowValue)
            {
                result.lowValue = newProps.lowValue;
            }
            if (oldProps.highValue != newProps.highValue)
            {
                result.highValue = newProps.highValue;
            }
            if (oldProps.value != newProps.value)
            {
                result.value = newProps.value;
            }
            if (oldProps.direction != newProps.direction)
            {
                result.direction = newProps.direction;
            }
            if (oldProps.label != newProps.label)
            {
                result.label = newProps.label;
            }
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:templateContainer
        internal class ReactTemplateContainer : UnityEngine.UIElements.TemplateContainer
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct TemplateContainerProps : IComponentProps
        {
            public StyleProps style;
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateTemplateContainerProps(JavaScriptValue props)
        {
            var result = new TemplateContainerProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyTemplateContainerProps(ReactTemplateContainer component, TemplateContainerProps props)
        {
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static TemplateContainerProps MakeTemplateContainerPropsDiff(TemplateContainerProps oldProps, TemplateContainerProps newProps)
        {
            var result = new TemplateContainerProps();
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:textElement
        internal class ReactTextElement : UnityEngine.UIElements.TextElement
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct TextElementProps : IComponentProps
        {
            public StyleProps style;
            public System.String text; 
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateTextElementProps(JavaScriptValue props)
        {
            var result = new TextElementProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("text")))
            {
                result.text = props.GetProperty(JavaScriptPropertyId.FromString("text")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyTextElementProps(ReactTextElement component, TextElementProps props)
        {
            if (props.text != null)
            {
                component.text = props.text;
            }
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static TextElementProps MakeTextElementPropsDiff(TextElementProps oldProps, TextElementProps newProps)
        {
            var result = new TextElementProps();
            if (oldProps.text != newProps.text)
            {
                result.text = newProps.text;
            }
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:visualElement
        internal class ReactVisualElement : UnityEngine.UIElements.VisualElement
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct VisualElementProps : IComponentProps
        {
            public StyleProps style;
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateVisualElementProps(JavaScriptValue props)
        {
            var result = new VisualElementProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyVisualElementProps(ReactVisualElement component, VisualElementProps props)
        {
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static VisualElementProps MakeVisualElementPropsDiff(VisualElementProps oldProps, VisualElementProps newProps)
        {
            var result = new VisualElementProps();
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:textField
        internal class ReactTextField : UnityEngine.UIElements.TextField
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct TextFieldProps : IComponentProps
        {
            public StyleProps style;
            public Nullable<System.Boolean> multiline; 
            public System.String value; 
            public Nullable<System.Boolean> isReadOnly; 
            public Nullable<System.Boolean> isPasswordField; 
            public Nullable<System.Int32> maxLength; 
            public Nullable<System.Boolean> doubleClickSelectsWord; 
            public Nullable<System.Boolean> tripleClickSelectsLine; 
            public Nullable<System.Boolean> isDelayed; 
            public Nullable<System.Char> maskChar; 
            public System.String label; 
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateTextFieldProps(JavaScriptValue props)
        {
            var result = new TextFieldProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("multiline")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("value")))
            {
                result.value = props.GetProperty(JavaScriptPropertyId.FromString("value")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("isReadOnly")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("isPasswordField")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("maxLength")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("doubleClickSelectsWord")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tripleClickSelectsLine")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("isDelayed")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("maskChar")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("label")))
            {
                result.label = props.GetProperty(JavaScriptPropertyId.FromString("label")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyTextFieldProps(ReactTextField component, TextFieldProps props)
        {
            if (props.multiline.HasValue)
            {
                component.multiline = props.multiline.Value;
            }
            if (props.value != null)
            {
                component.value = props.value;
            }
            if (props.isReadOnly.HasValue)
            {
                component.isReadOnly = props.isReadOnly.Value;
            }
            if (props.isPasswordField.HasValue)
            {
                component.isPasswordField = props.isPasswordField.Value;
            }
            if (props.maxLength.HasValue)
            {
                component.maxLength = props.maxLength.Value;
            }
            if (props.doubleClickSelectsWord.HasValue)
            {
                component.doubleClickSelectsWord = props.doubleClickSelectsWord.Value;
            }
            if (props.tripleClickSelectsLine.HasValue)
            {
                component.tripleClickSelectsLine = props.tripleClickSelectsLine.Value;
            }
            if (props.isDelayed.HasValue)
            {
                component.isDelayed = props.isDelayed.Value;
            }
            if (props.maskChar.HasValue)
            {
                component.maskChar = props.maskChar.Value;
            }
            if (props.label != null)
            {
                component.label = props.label;
            }
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static TextFieldProps MakeTextFieldPropsDiff(TextFieldProps oldProps, TextFieldProps newProps)
        {
            var result = new TextFieldProps();
            if (oldProps.multiline != newProps.multiline)
            {
                result.multiline = newProps.multiline;
            }
            if (oldProps.value != newProps.value)
            {
                result.value = newProps.value;
            }
            if (oldProps.isReadOnly != newProps.isReadOnly)
            {
                result.isReadOnly = newProps.isReadOnly;
            }
            if (oldProps.isPasswordField != newProps.isPasswordField)
            {
                result.isPasswordField = newProps.isPasswordField;
            }
            if (oldProps.maxLength != newProps.maxLength)
            {
                result.maxLength = newProps.maxLength;
            }
            if (oldProps.doubleClickSelectsWord != newProps.doubleClickSelectsWord)
            {
                result.doubleClickSelectsWord = newProps.doubleClickSelectsWord;
            }
            if (oldProps.tripleClickSelectsLine != newProps.tripleClickSelectsLine)
            {
                result.tripleClickSelectsLine = newProps.tripleClickSelectsLine;
            }
            if (oldProps.isDelayed != newProps.isDelayed)
            {
                result.isDelayed = newProps.isDelayed;
            }
            if (oldProps.maskChar != newProps.maskChar)
            {
                result.maskChar = newProps.maskChar;
            }
            if (oldProps.label != newProps.label)
            {
                result.label = newProps.label;
            }
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }
        ///<Component>
        ///Name:toggle
        internal class ReactToggle : UnityEngine.UIElements.Toggle
        {
            private Dictionary<string, (Delegate, JavaScriptValue)> previousCallbacks = new Dictionary<string, (Delegate, JavaScriptValue)>();

            public void SetCallback<TEventType>(UnityEngine.UIElements.EventCallback<TEventType> callback, JavaScriptValue function) where TEventType : EventBase<TEventType>, new()
            {
                var t = typeof(TEventType);

                if (previousCallbacks.ContainsKey(t.Name))
                {
                    this.UnregisterCallback<TEventType>((UnityEngine.UIElements.EventCallback<TEventType>)previousCallbacks[t.Name].Item1);
                    
                    if (previousCallbacks[t.Name].Item2.IsValid)
                        previousCallbacks[t.Name].Item2.Release();

                    previousCallbacks.Remove(t.Name);
                }

                this.RegisterCallback(callback);

                previousCallbacks.Add(t.Name, (callback, function));
            }
        }   
        public struct ToggleProps : IComponentProps
        {
            public StyleProps style;
            public System.String text; 
            public Nullable<System.Boolean> value; 
            public System.String label; 
            public UnityEngine.UIElements.IBinding binding; 
            public System.String bindingPath; 
            public System.String viewDataKey; 
            public System.Object userData; 
            public Nullable<UnityEngine.UIElements.UsageHints> usageHints; 
            public Nullable<UnityEngine.UIElements.PickingMode> pickingMode; 
            public System.String name; 
            public Nullable<System.Boolean> visible; 
            public Nullable<System.Boolean> cacheAsBitmap; 
            public System.String tooltip; 
            public Nullable<System.Boolean> focusable; 
            public Nullable<System.Int32> tabIndex; 
            public Nullable<System.Boolean> delegatesFocus; 
         
            public UnityEngine.UIElements.EventCallback<PointerCaptureOutEvent> onPointerCaptureOutEvent;
            public JavaScriptValue onPointerCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCaptureEvent> onPointerCaptureEvent;
            public JavaScriptValue onPointerCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureOutEvent> onMouseCaptureOutEvent;
            public JavaScriptValue onMouseCaptureOutEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseCaptureEvent> onMouseCaptureEvent;
            public JavaScriptValue onMouseCaptureEventFunction;
            public UnityEngine.UIElements.EventCallback<ValidateCommandEvent> onValidateCommandEvent;
            public JavaScriptValue onValidateCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<ExecuteCommandEvent> onExecuteCommandEvent;
            public JavaScriptValue onExecuteCommandEventFunction;
            public UnityEngine.UIElements.EventCallback<DragExitedEvent> onDragExitedEvent;
            public JavaScriptValue onDragExitedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragEnterEvent> onDragEnterEvent;
            public JavaScriptValue onDragEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<DragLeaveEvent> onDragLeaveEvent;
            public JavaScriptValue onDragLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<DragUpdatedEvent> onDragUpdatedEvent;
            public JavaScriptValue onDragUpdatedEventFunction;
            public UnityEngine.UIElements.EventCallback<DragPerformEvent> onDragPerformEvent;
            public JavaScriptValue onDragPerformEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusOutEvent> onFocusOutEvent;
            public JavaScriptValue onFocusOutEventFunction;
            public UnityEngine.UIElements.EventCallback<BlurEvent> onBlurEvent;
            public JavaScriptValue onBlurEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusInEvent> onFocusInEvent;
            public JavaScriptValue onFocusInEventFunction;
            public UnityEngine.UIElements.EventCallback<FocusEvent> onFocusEvent;
            public JavaScriptValue onFocusEventFunction;
            public UnityEngine.UIElements.EventCallback<InputEvent> onInputEvent;
            public JavaScriptValue onInputEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyDownEvent> onKeyDownEvent;
            public JavaScriptValue onKeyDownEventFunction;
            public UnityEngine.UIElements.EventCallback<KeyUpEvent> onKeyUpEvent;
            public JavaScriptValue onKeyUpEventFunction;
            public UnityEngine.UIElements.EventCallback<GeometryChangedEvent> onGeometryChangedEvent;
            public JavaScriptValue onGeometryChangedEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseDownEvent> onMouseDownEvent;
            public JavaScriptValue onMouseDownEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseUpEvent> onMouseUpEvent;
            public JavaScriptValue onMouseUpEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseMoveEvent> onMouseMoveEvent;
            public JavaScriptValue onMouseMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextClickEvent> onContextClickEvent;
            public JavaScriptValue onContextClickEventFunction;
            public UnityEngine.UIElements.EventCallback<WheelEvent> onWheelEvent;
            public JavaScriptValue onWheelEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterEvent> onMouseEnterEvent;
            public JavaScriptValue onMouseEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveEvent> onMouseLeaveEvent;
            public JavaScriptValue onMouseLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseEnterWindowEvent> onMouseEnterWindowEvent;
            public JavaScriptValue onMouseEnterWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseLeaveWindowEvent> onMouseLeaveWindowEvent;
            public JavaScriptValue onMouseLeaveWindowEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOverEvent> onMouseOverEvent;
            public JavaScriptValue onMouseOverEventFunction;
            public UnityEngine.UIElements.EventCallback<MouseOutEvent> onMouseOutEvent;
            public JavaScriptValue onMouseOutEventFunction;
            public UnityEngine.UIElements.EventCallback<ContextualMenuPopulateEvent> onContextualMenuPopulateEvent;
            public JavaScriptValue onContextualMenuPopulateEventFunction;
            public UnityEngine.UIElements.EventCallback<AttachToPanelEvent> onAttachToPanelEvent;
            public JavaScriptValue onAttachToPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<DetachFromPanelEvent> onDetachFromPanelEvent;
            public JavaScriptValue onDetachFromPanelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerDownEvent> onPointerDownEvent;
            public JavaScriptValue onPointerDownEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerMoveEvent> onPointerMoveEvent;
            public JavaScriptValue onPointerMoveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerStationaryEvent> onPointerStationaryEvent;
            public JavaScriptValue onPointerStationaryEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerUpEvent> onPointerUpEvent;
            public JavaScriptValue onPointerUpEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerCancelEvent> onPointerCancelEvent;
            public JavaScriptValue onPointerCancelEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerEnterEvent> onPointerEnterEvent;
            public JavaScriptValue onPointerEnterEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerLeaveEvent> onPointerLeaveEvent;
            public JavaScriptValue onPointerLeaveEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOverEvent> onPointerOverEvent;
            public JavaScriptValue onPointerOverEventFunction;
            public UnityEngine.UIElements.EventCallback<PointerOutEvent> onPointerOutEvent;
            public JavaScriptValue onPointerOutEventFunction;
            public UnityEngine.UIElements.EventCallback<CustomStyleResolvedEvent> onCustomStyleResolvedEvent;
            public JavaScriptValue onCustomStyleResolvedEventFunction;
            public UnityEngine.UIElements.EventCallback<TooltipEvent> onTooltipEvent;
            public JavaScriptValue onTooltipEventFunction;
            public UnityEngine.UIElements.EventCallback<IMGUIEvent> onIMGUIEvent;
            public JavaScriptValue onIMGUIEventFunction;
          public UnityEngine.UIElements.EventCallback<ChangeEvent<string>> onChange;
            public JavaScriptValue onChangeFunction;
        }
        private static IComponentProps CreateToggleProps(JavaScriptValue props)
        {
            var result = new ToggleProps();
            if (props.HasProperty(JavaScriptPropertyId.FromString("text")))
            {
                result.text = props.GetProperty(JavaScriptPropertyId.FromString("text")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("value")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("label")))
            {
                result.label = props.GetProperty(JavaScriptPropertyId.FromString("label")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("binding")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("bindingPath")))
            {
                result.bindingPath = props.GetProperty(JavaScriptPropertyId.FromString("bindingPath")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("viewDataKey")))
            {
                result.viewDataKey = props.GetProperty(JavaScriptPropertyId.FromString("viewDataKey")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("userData")))
            {
                result.userData = props.GetProperty(JavaScriptPropertyId.FromString("userData")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("usageHints")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("pickingMode")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("name")))
            {
                result.name = props.GetProperty(JavaScriptPropertyId.FromString("name")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("visible")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("cacheAsBitmap")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tooltip")))
            {
                result.tooltip = props.GetProperty(JavaScriptPropertyId.FromString("tooltip")).ToString();
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("focusable")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("tabIndex")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("delegatesFocus")))
            {
                // TODO: Implement
          
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureOutEventFunction = function;
                    result.onPointerCaptureOutEvent = (PointerCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCaptureEventFunction = function;
                    result.onPointerCaptureEvent = (PointerCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureOutEventFunction = function;
                    result.onMouseCaptureOutEvent = (MouseCaptureOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseCaptureEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseCaptureEventFunction = function;
                    result.onMouseCaptureEvent = (MouseCaptureEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onValidateCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onValidateCommandEventFunction = function;
                    result.onValidateCommandEvent = (ValidateCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onExecuteCommandEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onExecuteCommandEventFunction = function;
                    result.onExecuteCommandEvent = (ExecuteCommandEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragExitedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragExitedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragExitedEventFunction = function;
                    result.onDragExitedEvent = (DragExitedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragEnterEventFunction = function;
                    result.onDragEnterEvent = (DragEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragLeaveEventFunction = function;
                    result.onDragLeaveEvent = (DragLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragUpdatedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragUpdatedEventFunction = function;
                    result.onDragUpdatedEvent = (DragUpdatedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDragPerformEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDragPerformEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDragPerformEventFunction = function;
                    result.onDragPerformEvent = (DragPerformEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusOutEventFunction = function;
                    result.onFocusOutEvent = (FocusOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onBlurEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onBlurEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onBlurEventFunction = function;
                    result.onBlurEvent = (BlurEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusInEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusInEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusInEventFunction = function;
                    result.onFocusInEvent = (FocusInEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onFocusEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onFocusEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onFocusEventFunction = function;
                    result.onFocusEvent = (FocusEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onInputEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onInputEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onInputEventFunction = function;
                    result.onInputEvent = (InputEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyDownEventFunction = function;
                    result.onKeyDownEvent = (KeyDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onKeyUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onKeyUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onKeyUpEventFunction = function;
                    result.onKeyUpEvent = (KeyUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onGeometryChangedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onGeometryChangedEventFunction = function;
                    result.onGeometryChangedEvent = (GeometryChangedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseDownEventFunction = function;
                    result.onMouseDownEvent = (MouseDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseUpEventFunction = function;
                    result.onMouseUpEvent = (MouseUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseMoveEventFunction = function;
                    result.onMouseMoveEvent = (MouseMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextClickEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextClickEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextClickEventFunction = function;
                    result.onContextClickEvent = (ContextClickEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onWheelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onWheelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onWheelEventFunction = function;
                    result.onWheelEvent = (WheelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterEventFunction = function;
                    result.onMouseEnterEvent = (MouseEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveEventFunction = function;
                    result.onMouseLeaveEvent = (MouseLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseEnterWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseEnterWindowEventFunction = function;
                    result.onMouseEnterWindowEvent = (MouseEnterWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseLeaveWindowEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseLeaveWindowEventFunction = function;
                    result.onMouseLeaveWindowEvent = (MouseLeaveWindowEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOverEventFunction = function;
                    result.onMouseOverEvent = (MouseOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onMouseOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onMouseOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onMouseOutEventFunction = function;
                    result.onMouseOutEvent = (MouseOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onContextualMenuPopulateEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onContextualMenuPopulateEventFunction = function;
                    result.onContextualMenuPopulateEvent = (ContextualMenuPopulateEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onAttachToPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onAttachToPanelEventFunction = function;
                    result.onAttachToPanelEvent = (AttachToPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onDetachFromPanelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onDetachFromPanelEventFunction = function;
                    result.onDetachFromPanelEvent = (DetachFromPanelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerDownEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerDownEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerDownEventFunction = function;
                    result.onPointerDownEvent = (PointerDownEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerMoveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerMoveEventFunction = function;
                    result.onPointerMoveEvent = (PointerMoveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerStationaryEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerStationaryEventFunction = function;
                    result.onPointerStationaryEvent = (PointerStationaryEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerUpEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerUpEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerUpEventFunction = function;
                    result.onPointerUpEvent = (PointerUpEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerCancelEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerCancelEventFunction = function;
                    result.onPointerCancelEvent = (PointerCancelEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerEnterEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerEnterEventFunction = function;
                    result.onPointerEnterEvent = (PointerEnterEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerLeaveEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerLeaveEventFunction = function;
                    result.onPointerLeaveEvent = (PointerLeaveEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOverEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOverEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOverEventFunction = function;
                    result.onPointerOverEvent = (PointerOverEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onPointerOutEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onPointerOutEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onPointerOutEventFunction = function;
                    result.onPointerOutEvent = (PointerOutEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onCustomStyleResolvedEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onCustomStyleResolvedEventFunction = function;
                    result.onCustomStyleResolvedEvent = (CustomStyleResolvedEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onTooltipEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onTooltipEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onTooltipEventFunction = function;
                    result.onTooltipEvent = (TooltipEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
            if (props.HasProperty(JavaScriptPropertyId.FromString("onIMGUIEvent")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onIMGUIEvent"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onIMGUIEventFunction = function;
                    result.onIMGUIEvent = (IMGUIEvent evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined);
                        }
                    };
                }
            }
  
            // TODO: generate this in a better manner
            if (props.HasProperty(JavaScriptPropertyId.FromString("onChange")))
            {
                var function =  props.GetProperty(JavaScriptPropertyId.FromString("onChange"));
                if (function.ValueType == JavaScriptValueType.Function)
                {
                    function.AddRef();
                    result.onChangeFunction = function;
                    result.onChange = (ChangeEvent<string> evt) => {
                        if (function.IsValid)
                        {
                            function.CallFunction(JavaScriptValue.Undefined, JavaScriptValue.FromString(evt.newValue));
                        }
                    };
                }
            }

            if (props.HasProperty(JavaScriptPropertyId.FromString("style")))
            {
                result.style = MapStyle(props.GetProperty(JavaScriptPropertyId.FromString("style")));
            }

            return result;
        }
        private static void ApplyToggleProps(ReactToggle component, ToggleProps props)
        {
            if (props.text != null)
            {
                component.text = props.text;
            }
            if (props.value.HasValue)
            {
                component.value = props.value.Value;
            }
            if (props.label != null)
            {
                component.label = props.label;
            }
            if (props.binding != null)
            {
                component.binding = props.binding;
            }
            if (props.bindingPath != null)
            {
                component.bindingPath = props.bindingPath;
            }
            if (props.viewDataKey != null)
            {
                component.viewDataKey = props.viewDataKey;
            }
            if (props.userData != null)
            {
                component.userData = props.userData;
            }
            if (props.usageHints.HasValue)
            {
                component.usageHints = props.usageHints.Value;
            }
            if (props.pickingMode.HasValue)
            {
                component.pickingMode = props.pickingMode.Value;
            }
            if (props.name != null)
            {
                component.name = props.name;
            }
            if (props.visible.HasValue)
            {
                component.visible = props.visible.Value;
            }
            if (props.cacheAsBitmap.HasValue)
            {
                component.cacheAsBitmap = props.cacheAsBitmap.Value;
            }
            if (props.tooltip != null)
            {
                component.tooltip = props.tooltip;
            }
            if (props.focusable.HasValue)
            {
                component.focusable = props.focusable.Value;
            }
            if (props.tabIndex.HasValue)
            {
                component.tabIndex = props.tabIndex.Value;
            }
            if (props.delegatesFocus.HasValue)
            {
                component.delegatesFocus = props.delegatesFocus.Value;
            }
            if (props.onPointerCaptureOutEvent != null)
            {
                component.SetCallback(props.onPointerCaptureOutEvent, props.onPointerCaptureOutEventFunction);
            }
            if (props.onPointerCaptureEvent != null)
            {
                component.SetCallback(props.onPointerCaptureEvent, props.onPointerCaptureEventFunction);
            }
            if (props.onMouseCaptureOutEvent != null)
            {
                component.SetCallback(props.onMouseCaptureOutEvent, props.onMouseCaptureOutEventFunction);
            }
            if (props.onMouseCaptureEvent != null)
            {
                component.SetCallback(props.onMouseCaptureEvent, props.onMouseCaptureEventFunction);
            }
            if (props.onValidateCommandEvent != null)
            {
                component.SetCallback(props.onValidateCommandEvent, props.onValidateCommandEventFunction);
            }
            if (props.onExecuteCommandEvent != null)
            {
                component.SetCallback(props.onExecuteCommandEvent, props.onExecuteCommandEventFunction);
            }
            if (props.onDragExitedEvent != null)
            {
                component.SetCallback(props.onDragExitedEvent, props.onDragExitedEventFunction);
            }
            if (props.onDragEnterEvent != null)
            {
                component.SetCallback(props.onDragEnterEvent, props.onDragEnterEventFunction);
            }
            if (props.onDragLeaveEvent != null)
            {
                component.SetCallback(props.onDragLeaveEvent, props.onDragLeaveEventFunction);
            }
            if (props.onDragUpdatedEvent != null)
            {
                component.SetCallback(props.onDragUpdatedEvent, props.onDragUpdatedEventFunction);
            }
            if (props.onDragPerformEvent != null)
            {
                component.SetCallback(props.onDragPerformEvent, props.onDragPerformEventFunction);
            }
            if (props.onFocusOutEvent != null)
            {
                component.SetCallback(props.onFocusOutEvent, props.onFocusOutEventFunction);
            }
            if (props.onBlurEvent != null)
            {
                component.SetCallback(props.onBlurEvent, props.onBlurEventFunction);
            }
            if (props.onFocusInEvent != null)
            {
                component.SetCallback(props.onFocusInEvent, props.onFocusInEventFunction);
            }
            if (props.onFocusEvent != null)
            {
                component.SetCallback(props.onFocusEvent, props.onFocusEventFunction);
            }
            if (props.onInputEvent != null)
            {
                component.SetCallback(props.onInputEvent, props.onInputEventFunction);
            }
            if (props.onKeyDownEvent != null)
            {
                component.SetCallback(props.onKeyDownEvent, props.onKeyDownEventFunction);
            }
            if (props.onKeyUpEvent != null)
            {
                component.SetCallback(props.onKeyUpEvent, props.onKeyUpEventFunction);
            }
            if (props.onGeometryChangedEvent != null)
            {
                component.SetCallback(props.onGeometryChangedEvent, props.onGeometryChangedEventFunction);
            }
            if (props.onMouseDownEvent != null)
            {
                component.SetCallback(props.onMouseDownEvent, props.onMouseDownEventFunction);
            }
            if (props.onMouseUpEvent != null)
            {
                component.SetCallback(props.onMouseUpEvent, props.onMouseUpEventFunction);
            }
            if (props.onMouseMoveEvent != null)
            {
                component.SetCallback(props.onMouseMoveEvent, props.onMouseMoveEventFunction);
            }
            if (props.onContextClickEvent != null)
            {
                component.SetCallback(props.onContextClickEvent, props.onContextClickEventFunction);
            }
            if (props.onWheelEvent != null)
            {
                component.SetCallback(props.onWheelEvent, props.onWheelEventFunction);
            }
            if (props.onMouseEnterEvent != null)
            {
                component.SetCallback(props.onMouseEnterEvent, props.onMouseEnterEventFunction);
            }
            if (props.onMouseLeaveEvent != null)
            {
                component.SetCallback(props.onMouseLeaveEvent, props.onMouseLeaveEventFunction);
            }
            if (props.onMouseEnterWindowEvent != null)
            {
                component.SetCallback(props.onMouseEnterWindowEvent, props.onMouseEnterWindowEventFunction);
            }
            if (props.onMouseLeaveWindowEvent != null)
            {
                component.SetCallback(props.onMouseLeaveWindowEvent, props.onMouseLeaveWindowEventFunction);
            }
            if (props.onMouseOverEvent != null)
            {
                component.SetCallback(props.onMouseOverEvent, props.onMouseOverEventFunction);
            }
            if (props.onMouseOutEvent != null)
            {
                component.SetCallback(props.onMouseOutEvent, props.onMouseOutEventFunction);
            }
            if (props.onContextualMenuPopulateEvent != null)
            {
                component.SetCallback(props.onContextualMenuPopulateEvent, props.onContextualMenuPopulateEventFunction);
            }
            if (props.onAttachToPanelEvent != null)
            {
                component.SetCallback(props.onAttachToPanelEvent, props.onAttachToPanelEventFunction);
            }
            if (props.onDetachFromPanelEvent != null)
            {
                component.SetCallback(props.onDetachFromPanelEvent, props.onDetachFromPanelEventFunction);
            }
            if (props.onPointerDownEvent != null)
            {
                component.SetCallback(props.onPointerDownEvent, props.onPointerDownEventFunction);
            }
            if (props.onPointerMoveEvent != null)
            {
                component.SetCallback(props.onPointerMoveEvent, props.onPointerMoveEventFunction);
            }
            if (props.onPointerStationaryEvent != null)
            {
                component.SetCallback(props.onPointerStationaryEvent, props.onPointerStationaryEventFunction);
            }
            if (props.onPointerUpEvent != null)
            {
                component.SetCallback(props.onPointerUpEvent, props.onPointerUpEventFunction);
            }
            if (props.onPointerCancelEvent != null)
            {
                component.SetCallback(props.onPointerCancelEvent, props.onPointerCancelEventFunction);
            }
            if (props.onPointerEnterEvent != null)
            {
                component.SetCallback(props.onPointerEnterEvent, props.onPointerEnterEventFunction);
            }
            if (props.onPointerLeaveEvent != null)
            {
                component.SetCallback(props.onPointerLeaveEvent, props.onPointerLeaveEventFunction);
            }
            if (props.onPointerOverEvent != null)
            {
                component.SetCallback(props.onPointerOverEvent, props.onPointerOverEventFunction);
            }
            if (props.onPointerOutEvent != null)
            {
                component.SetCallback(props.onPointerOutEvent, props.onPointerOutEventFunction);
            }
            if (props.onCustomStyleResolvedEvent != null)
            {
                component.SetCallback(props.onCustomStyleResolvedEvent, props.onCustomStyleResolvedEventFunction);
            }
            if (props.onTooltipEvent != null)
            {
                component.SetCallback(props.onTooltipEvent, props.onTooltipEventFunction);
            }
            if (props.onIMGUIEvent != null)
            {
                component.SetCallback(props.onIMGUIEvent, props.onIMGUIEventFunction);
            }
  

            if (props.onChange != null)
            {
                component.SetCallback(props.onChange, props.onChangeFunction);
            }

            if (props.style != null)
            {
                ApplyStyle(component, props.style);
            }
        }
        private static ToggleProps MakeTogglePropsDiff(ToggleProps oldProps, ToggleProps newProps)
        {
            var result = new ToggleProps();
            if (oldProps.text != newProps.text)
            {
                result.text = newProps.text;
            }
            if (oldProps.value != newProps.value)
            {
                result.value = newProps.value;
            }
            if (oldProps.label != newProps.label)
            {
                result.label = newProps.label;
            }
            if (oldProps.binding != newProps.binding)
            {
                result.binding = newProps.binding;
            }
            if (oldProps.bindingPath != newProps.bindingPath)
            {
                result.bindingPath = newProps.bindingPath;
            }
            if (oldProps.viewDataKey != newProps.viewDataKey)
            {
                result.viewDataKey = newProps.viewDataKey;
            }
            if (oldProps.userData != newProps.userData)
            {
                result.userData = newProps.userData;
            }
            if (oldProps.usageHints != newProps.usageHints)
            {
                result.usageHints = newProps.usageHints;
            }
            if (oldProps.pickingMode != newProps.pickingMode)
            {
                result.pickingMode = newProps.pickingMode;
            }
            if (oldProps.name != newProps.name)
            {
                result.name = newProps.name;
            }
            if (oldProps.visible != newProps.visible)
            {
                result.visible = newProps.visible;
            }
            if (oldProps.cacheAsBitmap != newProps.cacheAsBitmap)
            {
                result.cacheAsBitmap = newProps.cacheAsBitmap;
            }
            if (oldProps.tooltip != newProps.tooltip)
            {
                result.tooltip = newProps.tooltip;
            }
            if (oldProps.focusable != newProps.focusable)
            {
                result.focusable = newProps.focusable;
            }
            if (oldProps.tabIndex != newProps.tabIndex)
            {
                result.tabIndex = newProps.tabIndex;
            }
            if (oldProps.delegatesFocus != newProps.delegatesFocus)
            {
                result.delegatesFocus = newProps.delegatesFocus;
            }
            if (oldProps.onPointerCaptureOutEvent != newProps.onPointerCaptureOutEvent)
            {
                result.onPointerCaptureOutEvent = newProps.onPointerCaptureOutEvent;
            }
            if (oldProps.onPointerCaptureEvent != newProps.onPointerCaptureEvent)
            {
                result.onPointerCaptureEvent = newProps.onPointerCaptureEvent;
            }
            if (oldProps.onMouseCaptureOutEvent != newProps.onMouseCaptureOutEvent)
            {
                result.onMouseCaptureOutEvent = newProps.onMouseCaptureOutEvent;
            }
            if (oldProps.onMouseCaptureEvent != newProps.onMouseCaptureEvent)
            {
                result.onMouseCaptureEvent = newProps.onMouseCaptureEvent;
            }
            if (oldProps.onValidateCommandEvent != newProps.onValidateCommandEvent)
            {
                result.onValidateCommandEvent = newProps.onValidateCommandEvent;
            }
            if (oldProps.onExecuteCommandEvent != newProps.onExecuteCommandEvent)
            {
                result.onExecuteCommandEvent = newProps.onExecuteCommandEvent;
            }
            if (oldProps.onDragExitedEvent != newProps.onDragExitedEvent)
            {
                result.onDragExitedEvent = newProps.onDragExitedEvent;
            }
            if (oldProps.onDragEnterEvent != newProps.onDragEnterEvent)
            {
                result.onDragEnterEvent = newProps.onDragEnterEvent;
            }
            if (oldProps.onDragLeaveEvent != newProps.onDragLeaveEvent)
            {
                result.onDragLeaveEvent = newProps.onDragLeaveEvent;
            }
            if (oldProps.onDragUpdatedEvent != newProps.onDragUpdatedEvent)
            {
                result.onDragUpdatedEvent = newProps.onDragUpdatedEvent;
            }
            if (oldProps.onDragPerformEvent != newProps.onDragPerformEvent)
            {
                result.onDragPerformEvent = newProps.onDragPerformEvent;
            }
            if (oldProps.onFocusOutEvent != newProps.onFocusOutEvent)
            {
                result.onFocusOutEvent = newProps.onFocusOutEvent;
            }
            if (oldProps.onBlurEvent != newProps.onBlurEvent)
            {
                result.onBlurEvent = newProps.onBlurEvent;
            }
            if (oldProps.onFocusInEvent != newProps.onFocusInEvent)
            {
                result.onFocusInEvent = newProps.onFocusInEvent;
            }
            if (oldProps.onFocusEvent != newProps.onFocusEvent)
            {
                result.onFocusEvent = newProps.onFocusEvent;
            }
            if (oldProps.onInputEvent != newProps.onInputEvent)
            {
                result.onInputEvent = newProps.onInputEvent;
            }
            if (oldProps.onKeyDownEvent != newProps.onKeyDownEvent)
            {
                result.onKeyDownEvent = newProps.onKeyDownEvent;
            }
            if (oldProps.onKeyUpEvent != newProps.onKeyUpEvent)
            {
                result.onKeyUpEvent = newProps.onKeyUpEvent;
            }
            if (oldProps.onGeometryChangedEvent != newProps.onGeometryChangedEvent)
            {
                result.onGeometryChangedEvent = newProps.onGeometryChangedEvent;
            }
            if (oldProps.onMouseDownEvent != newProps.onMouseDownEvent)
            {
                result.onMouseDownEvent = newProps.onMouseDownEvent;
            }
            if (oldProps.onMouseUpEvent != newProps.onMouseUpEvent)
            {
                result.onMouseUpEvent = newProps.onMouseUpEvent;
            }
            if (oldProps.onMouseMoveEvent != newProps.onMouseMoveEvent)
            {
                result.onMouseMoveEvent = newProps.onMouseMoveEvent;
            }
            if (oldProps.onContextClickEvent != newProps.onContextClickEvent)
            {
                result.onContextClickEvent = newProps.onContextClickEvent;
            }
            if (oldProps.onWheelEvent != newProps.onWheelEvent)
            {
                result.onWheelEvent = newProps.onWheelEvent;
            }
            if (oldProps.onMouseEnterEvent != newProps.onMouseEnterEvent)
            {
                result.onMouseEnterEvent = newProps.onMouseEnterEvent;
            }
            if (oldProps.onMouseLeaveEvent != newProps.onMouseLeaveEvent)
            {
                result.onMouseLeaveEvent = newProps.onMouseLeaveEvent;
            }
            if (oldProps.onMouseEnterWindowEvent != newProps.onMouseEnterWindowEvent)
            {
                result.onMouseEnterWindowEvent = newProps.onMouseEnterWindowEvent;
            }
            if (oldProps.onMouseLeaveWindowEvent != newProps.onMouseLeaveWindowEvent)
            {
                result.onMouseLeaveWindowEvent = newProps.onMouseLeaveWindowEvent;
            }
            if (oldProps.onMouseOverEvent != newProps.onMouseOverEvent)
            {
                result.onMouseOverEvent = newProps.onMouseOverEvent;
            }
            if (oldProps.onMouseOutEvent != newProps.onMouseOutEvent)
            {
                result.onMouseOutEvent = newProps.onMouseOutEvent;
            }
            if (oldProps.onContextualMenuPopulateEvent != newProps.onContextualMenuPopulateEvent)
            {
                result.onContextualMenuPopulateEvent = newProps.onContextualMenuPopulateEvent;
            }
            if (oldProps.onAttachToPanelEvent != newProps.onAttachToPanelEvent)
            {
                result.onAttachToPanelEvent = newProps.onAttachToPanelEvent;
            }
            if (oldProps.onDetachFromPanelEvent != newProps.onDetachFromPanelEvent)
            {
                result.onDetachFromPanelEvent = newProps.onDetachFromPanelEvent;
            }
            if (oldProps.onPointerDownEvent != newProps.onPointerDownEvent)
            {
                result.onPointerDownEvent = newProps.onPointerDownEvent;
            }
            if (oldProps.onPointerMoveEvent != newProps.onPointerMoveEvent)
            {
                result.onPointerMoveEvent = newProps.onPointerMoveEvent;
            }
            if (oldProps.onPointerStationaryEvent != newProps.onPointerStationaryEvent)
            {
                result.onPointerStationaryEvent = newProps.onPointerStationaryEvent;
            }
            if (oldProps.onPointerUpEvent != newProps.onPointerUpEvent)
            {
                result.onPointerUpEvent = newProps.onPointerUpEvent;
            }
            if (oldProps.onPointerCancelEvent != newProps.onPointerCancelEvent)
            {
                result.onPointerCancelEvent = newProps.onPointerCancelEvent;
            }
            if (oldProps.onPointerEnterEvent != newProps.onPointerEnterEvent)
            {
                result.onPointerEnterEvent = newProps.onPointerEnterEvent;
            }
            if (oldProps.onPointerLeaveEvent != newProps.onPointerLeaveEvent)
            {
                result.onPointerLeaveEvent = newProps.onPointerLeaveEvent;
            }
            if (oldProps.onPointerOverEvent != newProps.onPointerOverEvent)
            {
                result.onPointerOverEvent = newProps.onPointerOverEvent;
            }
            if (oldProps.onPointerOutEvent != newProps.onPointerOutEvent)
            {
                result.onPointerOutEvent = newProps.onPointerOutEvent;
            }
            if (oldProps.onCustomStyleResolvedEvent != newProps.onCustomStyleResolvedEvent)
            {
                result.onCustomStyleResolvedEvent = newProps.onCustomStyleResolvedEvent;
            }
            if (oldProps.onTooltipEvent != newProps.onTooltipEvent)
            {
                result.onTooltipEvent = newProps.onTooltipEvent;
            }
            if (oldProps.onIMGUIEvent != newProps.onIMGUIEvent)
            {
                result.onIMGUIEvent = newProps.onIMGUIEvent;
            }
  
            if (oldProps.onChange != newProps.onChange)
            {
                result.onChange = newProps.onChange;
            }

            if (oldProps.style != newProps.style)
            {
                result.style = newProps.style;
            }

            return result;
        }


        internal class StyleProps
        {
            public Nullable<UnityEngine.UIElements.StyleLength> width;
            public Nullable<UnityEngine.UIElements.StyleLength> height;
            public Nullable<UnityEngine.UIElements.StyleLength> maxWidth;
            public Nullable<UnityEngine.UIElements.StyleLength> maxHeight;
            public Nullable<UnityEngine.UIElements.StyleLength> minWidth;
            public Nullable<UnityEngine.UIElements.StyleLength> minHeight;
            public Nullable<UnityEngine.UIElements.StyleLength> flexBasis;
            public Nullable<UnityEngine.UIElements.StyleFloat> flexGrow;
            public Nullable<UnityEngine.UIElements.StyleFloat> flexShrink;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.FlexDirection>> flexDirection;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Wrap>> flexWrap;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Overflow>> overflow;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.OverflowClipBox>> unityOverflowClipBox;
            public Nullable<UnityEngine.UIElements.StyleLength> left;
            public Nullable<UnityEngine.UIElements.StyleLength> top;
            public Nullable<UnityEngine.UIElements.StyleLength> right;
            public Nullable<UnityEngine.UIElements.StyleLength> bottom;
            public Nullable<UnityEngine.UIElements.StyleLength> marginLeft;
            public Nullable<UnityEngine.UIElements.StyleLength> marginTop;
            public Nullable<UnityEngine.UIElements.StyleLength> marginRight;
            public Nullable<UnityEngine.UIElements.StyleLength> marginBottom;
            public Nullable<UnityEngine.UIElements.StyleLength> paddingLeft;
            public Nullable<UnityEngine.UIElements.StyleLength> paddingTop;
            public Nullable<UnityEngine.UIElements.StyleLength> paddingRight;
            public Nullable<UnityEngine.UIElements.StyleLength> paddingBottom;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Position>> position;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Align>> alignSelf;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.TextAnchor>> unityTextAlign;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.FontStyle>> unityFontStyleAndWeight;
            public Nullable<UnityEngine.UIElements.StyleFont> unityFont;
            public Nullable<UnityEngine.UIElements.StyleLength> fontSize;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.WhiteSpace>> whiteSpace;
            public Nullable<UnityEngine.UIElements.StyleColor> color;
            public Nullable<UnityEngine.UIElements.StyleColor> backgroundColor;
            public Nullable<UnityEngine.UIElements.StyleColor> borderColor;
            public Nullable<UnityEngine.UIElements.StyleBackground> backgroundImage;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.ScaleMode>> unityBackgroundScaleMode;
            public Nullable<UnityEngine.UIElements.StyleColor> unityBackgroundImageTintColor;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Align>> alignItems;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Align>> alignContent;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Justify>> justifyContent;
            public Nullable<UnityEngine.UIElements.StyleColor> borderLeftColor;
            public Nullable<UnityEngine.UIElements.StyleColor> borderTopColor;
            public Nullable<UnityEngine.UIElements.StyleColor> borderRightColor;
            public Nullable<UnityEngine.UIElements.StyleColor> borderBottomColor;
            public Nullable<UnityEngine.UIElements.StyleFloat> borderLeftWidth;
            public Nullable<UnityEngine.UIElements.StyleFloat> borderTopWidth;
            public Nullable<UnityEngine.UIElements.StyleFloat> borderRightWidth;
            public Nullable<UnityEngine.UIElements.StyleFloat> borderBottomWidth;
            public Nullable<UnityEngine.UIElements.StyleLength> borderTopLeftRadius;
            public Nullable<UnityEngine.UIElements.StyleLength> borderTopRightRadius;
            public Nullable<UnityEngine.UIElements.StyleLength> borderBottomRightRadius;
            public Nullable<UnityEngine.UIElements.StyleLength> borderBottomLeftRadius;
            public Nullable<UnityEngine.UIElements.StyleInt> unitySliceLeft;
            public Nullable<UnityEngine.UIElements.StyleInt> unitySliceTop;
            public Nullable<UnityEngine.UIElements.StyleInt> unitySliceRight;
            public Nullable<UnityEngine.UIElements.StyleInt> unitySliceBottom;
            public Nullable<UnityEngine.UIElements.StyleFloat> opacity;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.Visibility>> visibility;
            public Nullable<UnityEngine.UIElements.StyleCursor> cursor;
            public Nullable<UnityEngine.UIElements.StyleEnum<UnityEngine.UIElements.DisplayStyle>> display;
        }


        private static StyleProps MapStyle(JavaScriptValue value)
        {
            var result = new StyleProps();
            if (value.HasProperty(JavaScriptPropertyId.FromString("width")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("width")).ConvertToString().ToString();
                result.width = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("height")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("height")).ConvertToString().ToString();
                result.height = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("maxWidth")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("maxWidth")).ConvertToString().ToString();
                result.maxWidth = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("maxHeight")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("maxHeight")).ConvertToString().ToString();
                result.maxHeight = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("minWidth")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("minWidth")).ConvertToString().ToString();
                result.minWidth = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("minHeight")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("minHeight")).ConvertToString().ToString();
                result.minHeight = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("flexBasis")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("flexBasis")).ConvertToString().ToString();
                result.flexBasis = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("flexGrow")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("flexGrow")).ConvertToString().ToString();
                result.flexGrow = StyleMapper.ParseStyleFloat(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("flexShrink")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("flexShrink")).ConvertToString().ToString();
                result.flexShrink = StyleMapper.ParseStyleFloat(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("flexDirection")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("flexDirection")).ConvertToString().ToString();
                result.flexDirection = StyleMapper.ParseStyleEnum<FlexDirection>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("flexWrap")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("flexWrap")).ConvertToString().ToString();
                result.flexWrap = StyleMapper.ParseStyleEnum<Wrap>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("overflow")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("overflow")).ConvertToString().ToString();
                result.overflow = StyleMapper.ParseStyleEnum<Overflow>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("unityOverflowClipBox")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("unityOverflowClipBox")).ConvertToString().ToString();
                result.unityOverflowClipBox = StyleMapper.ParseStyleEnum<OverflowClipBox>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("left")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("left")).ConvertToString().ToString();
                result.left = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("top")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("top")).ConvertToString().ToString();
                result.top = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("right")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("right")).ConvertToString().ToString();
                result.right = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("bottom")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("bottom")).ConvertToString().ToString();
                result.bottom = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("marginLeft")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("marginLeft")).ConvertToString().ToString();
                result.marginLeft = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("marginTop")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("marginTop")).ConvertToString().ToString();
                result.marginTop = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("marginRight")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("marginRight")).ConvertToString().ToString();
                result.marginRight = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("marginBottom")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("marginBottom")).ConvertToString().ToString();
                result.marginBottom = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("paddingLeft")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("paddingLeft")).ConvertToString().ToString();
                result.paddingLeft = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("paddingTop")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("paddingTop")).ConvertToString().ToString();
                result.paddingTop = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("paddingRight")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("paddingRight")).ConvertToString().ToString();
                result.paddingRight = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("paddingBottom")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("paddingBottom")).ConvertToString().ToString();
                result.paddingBottom = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("position")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("position")).ConvertToString().ToString();
                result.position = StyleMapper.ParseStyleEnum<Position>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("alignSelf")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("alignSelf")).ConvertToString().ToString();
                result.alignSelf = StyleMapper.ParseStyleEnum<Align>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("unityTextAlign")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("unityTextAlign")).ConvertToString().ToString();
                result.unityTextAlign = StyleMapper.ParseStyleEnum<TextAnchor>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("unityFontStyleAndWeight")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("unityFontStyleAndWeight")).ConvertToString().ToString();
                result.unityFontStyleAndWeight = StyleMapper.ParseStyleEnum<FontStyle>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("unityFont")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("unityFont")).ConvertToString().ToString();
                result.unityFont = StyleMapper.ParseStyleFont(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("fontSize")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("fontSize")).ConvertToString().ToString();
                result.fontSize = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("whiteSpace")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("whiteSpace")).ConvertToString().ToString();
                result.whiteSpace = StyleMapper.ParseStyleEnum<WhiteSpace>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("color")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("color")).ConvertToString().ToString();
                result.color = StyleMapper.ParseStyleColor(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("backgroundColor")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("backgroundColor")).ConvertToString().ToString();
                result.backgroundColor = StyleMapper.ParseStyleColor(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderColor")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderColor")).ConvertToString().ToString();
                result.borderColor = StyleMapper.ParseStyleColor(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("backgroundImage")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("backgroundImage")).ConvertToString().ToString();
                result.backgroundImage = StyleMapper.ParseStyleBackground(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("unityBackgroundScaleMode")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("unityBackgroundScaleMode")).ConvertToString().ToString();
                result.unityBackgroundScaleMode = StyleMapper.ParseStyleEnum<ScaleMode>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("unityBackgroundImageTintColor")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("unityBackgroundImageTintColor")).ConvertToString().ToString();
                result.unityBackgroundImageTintColor = StyleMapper.ParseStyleColor(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("alignItems")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("alignItems")).ConvertToString().ToString();
                result.alignItems = StyleMapper.ParseStyleEnum<Align>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("alignContent")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("alignContent")).ConvertToString().ToString();
                result.alignContent = StyleMapper.ParseStyleEnum<Align>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("justifyContent")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("justifyContent")).ConvertToString().ToString();
                result.justifyContent = StyleMapper.ParseStyleEnum<Justify>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderLeftColor")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderLeftColor")).ConvertToString().ToString();
                result.borderLeftColor = StyleMapper.ParseStyleColor(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderTopColor")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderTopColor")).ConvertToString().ToString();
                result.borderTopColor = StyleMapper.ParseStyleColor(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderRightColor")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderRightColor")).ConvertToString().ToString();
                result.borderRightColor = StyleMapper.ParseStyleColor(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderBottomColor")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderBottomColor")).ConvertToString().ToString();
                result.borderBottomColor = StyleMapper.ParseStyleColor(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderLeftWidth")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderLeftWidth")).ConvertToString().ToString();
                result.borderLeftWidth = StyleMapper.ParseStyleFloat(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderTopWidth")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderTopWidth")).ConvertToString().ToString();
                result.borderTopWidth = StyleMapper.ParseStyleFloat(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderRightWidth")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderRightWidth")).ConvertToString().ToString();
                result.borderRightWidth = StyleMapper.ParseStyleFloat(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderBottomWidth")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderBottomWidth")).ConvertToString().ToString();
                result.borderBottomWidth = StyleMapper.ParseStyleFloat(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderTopLeftRadius")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderTopLeftRadius")).ConvertToString().ToString();
                result.borderTopLeftRadius = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderTopRightRadius")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderTopRightRadius")).ConvertToString().ToString();
                result.borderTopRightRadius = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderBottomRightRadius")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderBottomRightRadius")).ConvertToString().ToString();
                result.borderBottomRightRadius = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("borderBottomLeftRadius")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("borderBottomLeftRadius")).ConvertToString().ToString();
                result.borderBottomLeftRadius = StyleMapper.ParseStyleLength(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("unitySliceLeft")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("unitySliceLeft")).ConvertToString().ToString();
                result.unitySliceLeft = StyleMapper.ParseStyleInt(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("unitySliceTop")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("unitySliceTop")).ConvertToString().ToString();
                result.unitySliceTop = StyleMapper.ParseStyleInt(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("unitySliceRight")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("unitySliceRight")).ConvertToString().ToString();
                result.unitySliceRight = StyleMapper.ParseStyleInt(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("unitySliceBottom")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("unitySliceBottom")).ConvertToString().ToString();
                result.unitySliceBottom = StyleMapper.ParseStyleInt(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("opacity")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("opacity")).ConvertToString().ToString();
                result.opacity = StyleMapper.ParseStyleFloat(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("visibility")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("visibility")).ConvertToString().ToString();
                result.visibility = StyleMapper.ParseStyleEnum<Visibility>(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("cursor")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("cursor")).ConvertToString().ToString();
                result.cursor = StyleMapper.ParseStyleCursor(stringValue);
            }
            if (value.HasProperty(JavaScriptPropertyId.FromString("display")))
            {
                var stringValue = value.GetProperty(JavaScriptPropertyId.FromString("display")).ConvertToString().ToString();
                result.display = StyleMapper.ParseStyleEnum<DisplayStyle>(stringValue);
            }
            return result;
        }


        private static void ApplyStyle(VisualElement element, StyleProps style)
        {
            if (style.width.HasValue)
            {
                element.style.width = style.width.Value;
            }
            if (style.height.HasValue)
            {
                element.style.height = style.height.Value;
            }
            if (style.maxWidth.HasValue)
            {
                element.style.maxWidth = style.maxWidth.Value;
            }
            if (style.maxHeight.HasValue)
            {
                element.style.maxHeight = style.maxHeight.Value;
            }
            if (style.minWidth.HasValue)
            {
                element.style.minWidth = style.minWidth.Value;
            }
            if (style.minHeight.HasValue)
            {
                element.style.minHeight = style.minHeight.Value;
            }
            if (style.flexBasis.HasValue)
            {
                element.style.flexBasis = style.flexBasis.Value;
            }
            if (style.flexGrow.HasValue)
            {
                element.style.flexGrow = style.flexGrow.Value;
            }
            if (style.flexShrink.HasValue)
            {
                element.style.flexShrink = style.flexShrink.Value;
            }
            if (style.flexDirection.HasValue)
            {
                element.style.flexDirection = style.flexDirection.Value;
            }
            if (style.flexWrap.HasValue)
            {
                element.style.flexWrap = style.flexWrap.Value;
            }
            if (style.overflow.HasValue)
            {
                element.style.overflow = style.overflow.Value;
            }
            if (style.unityOverflowClipBox.HasValue)
            {
                element.style.unityOverflowClipBox = style.unityOverflowClipBox.Value;
            }
            if (style.left.HasValue)
            {
                element.style.left = style.left.Value;
            }
            if (style.top.HasValue)
            {
                element.style.top = style.top.Value;
            }
            if (style.right.HasValue)
            {
                element.style.right = style.right.Value;
            }
            if (style.bottom.HasValue)
            {
                element.style.bottom = style.bottom.Value;
            }
            if (style.marginLeft.HasValue)
            {
                element.style.marginLeft = style.marginLeft.Value;
            }
            if (style.marginTop.HasValue)
            {
                element.style.marginTop = style.marginTop.Value;
            }
            if (style.marginRight.HasValue)
            {
                element.style.marginRight = style.marginRight.Value;
            }
            if (style.marginBottom.HasValue)
            {
                element.style.marginBottom = style.marginBottom.Value;
            }
            if (style.paddingLeft.HasValue)
            {
                element.style.paddingLeft = style.paddingLeft.Value;
            }
            if (style.paddingTop.HasValue)
            {
                element.style.paddingTop = style.paddingTop.Value;
            }
            if (style.paddingRight.HasValue)
            {
                element.style.paddingRight = style.paddingRight.Value;
            }
            if (style.paddingBottom.HasValue)
            {
                element.style.paddingBottom = style.paddingBottom.Value;
            }
            if (style.position.HasValue)
            {
                element.style.position = style.position.Value;
            }
            if (style.alignSelf.HasValue)
            {
                element.style.alignSelf = style.alignSelf.Value;
            }
            if (style.unityTextAlign.HasValue)
            {
                element.style.unityTextAlign = style.unityTextAlign.Value;
            }
            if (style.unityFontStyleAndWeight.HasValue)
            {
                element.style.unityFontStyleAndWeight = style.unityFontStyleAndWeight.Value;
            }
            if (style.unityFont.HasValue)
            {
                element.style.unityFont = style.unityFont.Value;
            }
            if (style.fontSize.HasValue)
            {
                element.style.fontSize = style.fontSize.Value;
            }
            if (style.whiteSpace.HasValue)
            {
                element.style.whiteSpace = style.whiteSpace.Value;
            }
            if (style.color.HasValue)
            {
                element.style.color = style.color.Value;
            }
            if (style.backgroundColor.HasValue)
            {
                element.style.backgroundColor = style.backgroundColor.Value;
            }
            if (style.borderColor.HasValue)
            {
                element.style.borderColor = style.borderColor.Value;
            }
            if (style.backgroundImage.HasValue)
            {
                element.style.backgroundImage = style.backgroundImage.Value;
            }
            if (style.unityBackgroundScaleMode.HasValue)
            {
                element.style.unityBackgroundScaleMode = style.unityBackgroundScaleMode.Value;
            }
            if (style.unityBackgroundImageTintColor.HasValue)
            {
                element.style.unityBackgroundImageTintColor = style.unityBackgroundImageTintColor.Value;
            }
            if (style.alignItems.HasValue)
            {
                element.style.alignItems = style.alignItems.Value;
            }
            if (style.alignContent.HasValue)
            {
                element.style.alignContent = style.alignContent.Value;
            }
            if (style.justifyContent.HasValue)
            {
                element.style.justifyContent = style.justifyContent.Value;
            }
            if (style.borderLeftColor.HasValue)
            {
                element.style.borderLeftColor = style.borderLeftColor.Value;
            }
            if (style.borderTopColor.HasValue)
            {
                element.style.borderTopColor = style.borderTopColor.Value;
            }
            if (style.borderRightColor.HasValue)
            {
                element.style.borderRightColor = style.borderRightColor.Value;
            }
            if (style.borderBottomColor.HasValue)
            {
                element.style.borderBottomColor = style.borderBottomColor.Value;
            }
            if (style.borderLeftWidth.HasValue)
            {
                element.style.borderLeftWidth = style.borderLeftWidth.Value;
            }
            if (style.borderTopWidth.HasValue)
            {
                element.style.borderTopWidth = style.borderTopWidth.Value;
            }
            if (style.borderRightWidth.HasValue)
            {
                element.style.borderRightWidth = style.borderRightWidth.Value;
            }
            if (style.borderBottomWidth.HasValue)
            {
                element.style.borderBottomWidth = style.borderBottomWidth.Value;
            }
            if (style.borderTopLeftRadius.HasValue)
            {
                element.style.borderTopLeftRadius = style.borderTopLeftRadius.Value;
            }
            if (style.borderTopRightRadius.HasValue)
            {
                element.style.borderTopRightRadius = style.borderTopRightRadius.Value;
            }
            if (style.borderBottomRightRadius.HasValue)
            {
                element.style.borderBottomRightRadius = style.borderBottomRightRadius.Value;
            }
            if (style.borderBottomLeftRadius.HasValue)
            {
                element.style.borderBottomLeftRadius = style.borderBottomLeftRadius.Value;
            }
            if (style.unitySliceLeft.HasValue)
            {
                element.style.unitySliceLeft = style.unitySliceLeft.Value;
            }
            if (style.unitySliceTop.HasValue)
            {
                element.style.unitySliceTop = style.unitySliceTop.Value;
            }
            if (style.unitySliceRight.HasValue)
            {
                element.style.unitySliceRight = style.unitySliceRight.Value;
            }
            if (style.unitySliceBottom.HasValue)
            {
                element.style.unitySliceBottom = style.unitySliceBottom.Value;
            }
            if (style.opacity.HasValue)
            {
                element.style.opacity = style.opacity.Value;
            }
            if (style.visibility.HasValue)
            {
                element.style.visibility = style.visibility.Value;
            }
            if (style.cursor.HasValue)
            {
                element.style.cursor = style.cursor.Value;
            }
            if (style.display.HasValue)
            {
                element.style.display = style.display.Value;
            }
        }
    }
}